// Code generated by mockery 2.7.5. DO NOT EDIT.

package mocks

import (
	context "context"

	log "github.com/tendermint/tendermint/libs/log"
	light "github.com/tendermint/tendermint/light"

	mock "github.com/stretchr/testify/mock"

	state "github.com/tendermint/tendermint/state"

	time "time"
)

// SyncReactor is an autogenerated mock type for the SyncReactor type
type SyncReactor struct {
	mock.Mock
}

// Backfill provides a mock function with given fields: _a0
func (_m *SyncReactor) Backfill(_a0 state.State) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(state.State) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InitStateProvider provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *SyncReactor) InitStateProvider(_a0 state.State, _a1 []string, _a2 light.TrustOptions, _a3 log.Logger) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 error
	if rf, ok := ret.Get(0).(func(state.State, []string, light.TrustOptions, log.Logger) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Sync provides a mock function with given fields: _a0, _a1
func (_m *SyncReactor) Sync(_a0 context.Context, _a1 time.Duration) (state.State, error) {
	ret := _m.Called(_a0, _a1)

	var r0 state.State
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) state.State); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(state.State)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, time.Duration) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
